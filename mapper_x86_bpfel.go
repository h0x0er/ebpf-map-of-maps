// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadMapper returns the embedded CollectionSpec for Mapper.
func LoadMapper() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_MapperBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Mapper: %w", err)
	}

	return spec, err
}

// LoadMapperObjects loads Mapper and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*MapperObjects
//	*MapperPrograms
//	*MapperMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadMapperObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadMapper()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// MapperSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type MapperSpecs struct {
	MapperProgramSpecs
	MapperMapSpecs
}

// MapperSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type MapperProgramSpecs struct {
}

// MapperMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type MapperMapSpecs struct {
	InnerMap *ebpf.MapSpec `ebpf:"inner_map"`
	OuterMap *ebpf.MapSpec `ebpf:"outer_map"`
}

// MapperObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadMapperObjects or ebpf.CollectionSpec.LoadAndAssign.
type MapperObjects struct {
	MapperPrograms
	MapperMaps
}

func (o *MapperObjects) Close() error {
	return _MapperClose(
		&o.MapperPrograms,
		&o.MapperMaps,
	)
}

// MapperMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadMapperObjects or ebpf.CollectionSpec.LoadAndAssign.
type MapperMaps struct {
	InnerMap *ebpf.Map `ebpf:"inner_map"`
	OuterMap *ebpf.Map `ebpf:"outer_map"`
}

func (m *MapperMaps) Close() error {
	return _MapperClose(
		m.InnerMap,
		m.OuterMap,
	)
}

// MapperPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadMapperObjects or ebpf.CollectionSpec.LoadAndAssign.
type MapperPrograms struct {
}

func (p *MapperPrograms) Close() error {
	return _MapperClose()
}

func _MapperClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed mapper_x86_bpfel.o
var _MapperBytes []byte
